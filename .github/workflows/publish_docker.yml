# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "dev" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Check:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Sonarqube Check
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  Publish:
    # The type of runner that the job will run on
     runs-on: ubuntu-latest
     steps:
      - uses: actions/checkout@v3
      - name: Docker Login
        uses: docker/login-action@v2.1.0
        with:
         registry: ${{ secrets.REGISTRY }}
         username: ${{ secrets.REGISTRY_USERNAME }}
         password: ${{ secrets.REGISTRY_PASSWORD }}
         
      - name: Create .env file
        uses: SpicyPizza/create-envfile@v1.3.0
        with:
           JDBC_DATABASE_URL:  ${{ secrets.JDBC_DATABASE_URL }}
           JDBC_DATABASE_USERNAME: ${{ secrets.JDBC_DATABASE_USERNAME }}
           JDBC_DATABASE_PASSWORD: ${{ secrets.JDBC_DATABASE_PASSWORD }}
     
      - name: Build and push Frontend
        uses: docker/build-push-action@v3
        with:
          context: ./WebshopFrontend
          file: ./WebshopFrontend/Dockerfile
          push: true
          tags: ${{ secrets.REGISTRY }}/frontend
          
      - name: Build and push User Backend
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./UserAndAuthBackend/Dockerfile
          push: true
          tags: ${{ secrets.REGISTRY }}/userbackend
          
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Build with Maven
        run: |
          cd WebshopBackend
          mvn spring-boot:build-image -DskipTests 
      - name: Push Backend
        run: |
            MVN_VERSION=$( cd ./WebshopBackend
            mvn -q \
            -Dexec.executable=echo \
            -Dexec.args='${project.version}' \
            --non-recursive \
            exec:exec)
            
            docker push ${{ secrets.REGISTRY }}/backend:$MVN_VERSION
          
